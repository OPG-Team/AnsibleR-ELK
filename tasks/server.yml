---
- name: Ensure ELK directories exist
  file:
    path: "{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default('1000') }}"
    group: "{{ item.group | default('1000') }}"
    mode: "{{ item.mode | default('0755') }}"
  loop:
    - { path: "{{ certs_dir }}", mode: '0700' }
    - { path: /etc/logstash/conf.d, mode: '0755' }
    - { path: "{{ ssl_log_dir }}", mode: '0777' }

- name: Copy server certificates
  copy:
    src: "{{ certs_dir }}/{{ item }}"
    dest: "/etc/elk/certs/{{ item }}"
    owner: "1000"
    group: "1000"
    mode: '0600'
  loop:
    - ca.crt
    - server.crt
    - server.key
    - fullchain.crt

- name: Configure Logstash
  template:
    src: logstash.conf.j2
    dest: /etc/logstash/conf.d/logstash.conf
  changed_when: true
  notify:
    - restart logstash
    - create log user
    - create kiba user
- name: Copy Docker Compose file
  template:
    src: docker-compose.yml.j2
    dest: /etc/elk/docker-compose.yml

- name: Launch ELK stack
  command: docker compose up -d
  args:
    chdir: /etc/elk
  register: compose_result
  changed_when:
    - "'Creating' in compose_result.stdout"
    - "'Starting' in compose_result.stdout"
    - "'Recreating' in compose_result.stdout"

- name: Wait for Elasticsearch container to be running
  command: docker inspect -f '{{'{{'}}.State.Running{{'}}'}}' elk-elasticsearch-1
  register: elastic_running
  retries: 10
  delay: 5
  until: elastic_running.stdout == "true"

# Генерация сертификатов внутри контейнера

- name: create certs dir inside container
  command: docker exec elk-elasticsearch-1 mkdir -p /tmp/certs

- name: generate CA
  command: docker exec elk-elasticsearch-1 elasticsearch-certutil ca --pem --out /tmp/certs/elastic-stack-ca.zip
  args:
    creates: /tmp/certs/elastic-stack-ca.zip

- name: extract CA zip inside container (flatten output)
  command: docker exec elk-elasticsearch-1 unzip -j -o /tmp/certs/elastic-stack-ca.zip -d /tmp/certs
  args:
    creates: /tmp/certs/ca.crt

- name: create instances.yml on localhost
  copy:
    content: |
      instances:
        - name: elk-elasticsearch-1
          dns:
            - elasticsearch
            - localhost
    dest: /tmp/instances.yml
  delegate_to: localhost

- name: copy instances.yml to container
  command: docker cp /tmp/instances.yml elk-elasticsearch-1:/tmp/instances.yml

- name: generate server cert using CA
  command: docker exec elk-elasticsearch-1 elasticsearch-certutil cert --ca-cert /tmp/certs/ca.crt --ca-key /tmp/certs/ca.key --pem --in /tmp/instances.yml --out /tmp/certs/elasticsearch.zip
  args:
    creates: /tmp/certs/elasticsearch.zip

- name: extract server cert zip inside container (flatten output)
  command: docker exec elk-elasticsearch-1 unzip -j -o /tmp/certs/elasticsearch.zip -d /tmp/certs
  args:
    creates: /tmp/certs/elk-elasticsearch-1.crt

# Копируем сгенерированные сертификаты наружу в логдир

- name: ensure local ssl_log_dir exists
  file:
    path: "{{ ssl_log_dir }}"
    state: directory
    mode: '0777'

- name: copy certs from container to ssl_log_dir on host
  command: docker cp elk-elasticsearch-1:/tmp/certs/. "{{ ssl_log_dir }}"

- name: fix permissions on ssl_log_dir
  file:
    path: "{{ ssl_log_dir }}"
    owner: 1000
    group: 1000
    recurse: yes

- name: create PKCS12 keystore for elasticsearch HTTP SSL
  command: >
    docker exec elk-elasticsearch-1 openssl pkcs12 -export
    -in /usr/share/elasticsearch/config/certs/elk-elasticsearch-1.crt
    -inkey /usr/share/elasticsearch/config/certs/elk-elasticsearch-1.key
    -out /usr/share/elasticsearch/config/certs/elasticsearch-keystore.p12
    -name elasticsearch
    -CAfile /usr/share/elasticsearch/config/certs/ca.crt
    -caname "Elastic Certificate Tool Autogenerated CA"
    -passout pass:NtdA5962
  args:
    creates: /usr/share/elasticsearch/config/certs/elasticsearch-keystore.p12
